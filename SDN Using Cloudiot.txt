""" AdaRank algorithm
""" from __future__ import print_function, division
import math
import numpy as np
import sklearn
import sys
from sklearn.utils import check_X_y
from metrics import NDCGScorer
class AdaRank(sklearn.base.BaseEstimator): """AdaRank algorithm""" def __init__(self, max_iter=500, tol=0.0001, estop=1, verbose=False, scorer=None):
self.max_iter = max_iter
self.tol = tol
self.estop = estop
self.verbose = verbose
self.scorer = scorer
def fit(self, X, y, qid, X_valid=None, y_valid=None, qid_valid=None): """Fit a model to the data""" X, y = check_X_y(X, y, 'csr')
X = X.toarray()
if X_valid is None:
X_valid, y_valid, qid_valid = X, y, qid
else:
X_valid, y_valid = check_X_y(X_valid, y_valid, 'csr')
X_valid = X_valid.toarray()
n_queries = np.unique(qid).shape[0]
weights = np.ones(n_queries, dtype=np.float64) / n_queries
weak_rankers = []
coef = np.zeros(X.shape[1])
# use nDCG@10 as the default scorer
if self.scorer is None:
self.scorer = NDCGScorer(k=10)
# precompute performance measurements for all weak rankers
weak_ranker_score = []
for j in range(X.shape[1]):
pred = X[:, j].ravel()
weak_ranker_score.append(self.scorer(y, pred, qid))
best_perf_train = -np.inf
best_perf_valid = -np.inf
used_fids = []
estop = None
self.n_iter = 0
while self.n_iter < self.max_iter:
self.n_iter += 1
best_weighted_average = -np.inf
best_weak_ranker = None
for fid, score in enumerate(weak_ranker_score):
if fid in used_fids:
continue
weighted_average = np.dot(weights, score)
if weighted_average > best_weighted_average:
best_weak_ranker = {'fid': fid, 'score': score}
best_weighted_average = weighted_average
# stop when all the weaker rankers are out
if best_weak_ranker is None:
break
h = best_weak_ranker
h['alpha'] = 0.5 * (math.log(np.dot(weights, 1 + h['score']) /
np.dot(weights, 1 - h['score'])))
weak_rankers.append(h)
# update the ranker
coef[h['fid']] += h['alpha']
# if len(used_fids) > 5:
# used_fids.pop(0)
# used_fids.append(h['fid'])
# score both training and validation data
score_train = self.scorer(y, np.dot(X, coef), qid)
perf_train = score_train.mean()
perf_valid = perf_train
if X_valid is not X:
perf_valid = self.scorer(y_valid, np.dot(X_valid, coef), qid_valid).mean()
if self.verbose:
print('{n_iter}\t{alpha}\t{fid}\t{score}\ttrain {train:.4f}\tvalid {valid:.4f}'. format(n_iter=self.n_iter, alpha=h['alpha'], fid=h['fid'], score=h['score'][:5], train=perf_train, valid=perf_valid), file=sys.stderr)
# update the best validation scores
if perf_valid > best_perf_valid + self.tol:
estop = 0
best_perf_valid = perf_valid
self.coef_ = coef.copy()
else:
estop += 1
# update the best training score
if perf_train > best_perf_train + self.tol:
best_perf_train = perf_train
else:
# stop if scores on both sets fail to improve
if estop >= self.estop:
break
# update weights
new_weights = np.exp(-score_train)
weights = new_weights / new_weights.sum()
return weights
def predict(self, X, qid): """Make predictions""" return np.dot(X.toarray(), self.coef_)
from __future__ import division
import numpy as np
from utils import group_offsets
class Scorer(object):
def __init__(self, score_func, **kwargs):
self.score_func = score_func
self.kwargs = kwargs
def __call__(self, *args):
return self.score_func(*args, **self.kwargs)
# Precision
def _p_score(y_true, y_pred, k=None):
order = np.argsort(-y_pred)
y_true = np.take(y_true, order[:k])
return np.sum(y_true > 0) / len(y_true)
def p_score(y_true, y_pred, qid, k=None):
return np.array([_p_score(y_true[a:b], y_pred[a:b], k=k) for a, b in
group_offsets(qid)])
class PScorer(Scorer):
def __init__(self, **kwargs):
super(PScorer, self).__init__(p_score, **kwargs)
# AP (Average Precision)
def _ap_score(y_true, y_pred):
order = np.argsort(-y_pred)
y_true = np.take(y_true, order)
pos = 1 + np.where(y_true > 0)[0]
n_rels = 1 + np.arange(len(pos))
return np.mean(n_rels / pos) if len(pos) > 0 else 0
def ap_score(y_true, y_pred, qid):
return np.array([_ap_score(y_true[a:b], y_pred[a:b]) for a, b in group_offsets(qid)])
class APScorer(Scorer):
def __init__(self):
super(APScorer, self).__init__(ap_score)
# DCG/nDCG (Normalized Discounted Cumulative Gain)
def _burges_dcg(y_true, y_pred, k=None):
# order = np.argsort(y_pred)[::-1]
order = np.argsort(-y_pred)
y_true = np.take(y_true, order[:k])
gain = 2 ** y_true - 1
discounts = np.log2(np.arange(len(gain)) + 2)
return np.sum(gain / discounts)
def _trec_dcg(y_true, y_pred, k=None):
order = np.argsort(-y_pred)
y_true = np.take(y_true, order[:k])
gain = y_true
discounts = np.log2(np.arange(len(gain)) + 2)
return np.sum(gain / discounts)
def _dcg_score(y_true, y_pred, qid, k=None, dcg_func=None):
assert dcg_func is not None
y_true = np.maximum(y_true, 0)
return np.array([dcg_func(y_true[a:b], y_pred[a:b], k=k) for a, b in
group_offsets(qid)])
def _ndcg_score(y_true, y_pred, qid, k=None, dcg_func=None):
assert dcg_func is not None
y_true = np.maximum(y_true, 0)
dcg = _dcg_score(y_true, y_pred, qid, k=k, dcg_func=dcg_func)
idcg = np.array([dcg_func(np.sort(y_true[a:b]), np.arange(0, b - a), k=k)
for a, b in group_offsets(qid)])
assert (dcg <= idcg).all()
idcg[idcg == 0] = 1
return dcg / idcg
def dcg_score(y_true, y_pred, qid, k=None, version='burges'):
assert version in ['burges', 'trec']
dcg_func = _burges_dcg if version == 'burges' else _trec_dcg
return _dcg_score(y_true, y_pred, qid, k=k, dcg_func=dcg_func)
def ndcg_score(y_true, y_pred, qid, k=None, version='burges'):
assert version in ['burges', 'trec']
dcg_func = _burges_dcg if version == 'burges' else _trec_dcg
return _ndcg_score(y_true, y_pred, qid, k=k, dcg_func=dcg_func)
class DCGScorer(Scorer):
def __init__(self, **kwargs):
super(DCGScorer, self).__init__(dcg_score, **kwargs)
class NDCGScorer(Scorer):
def __init__(self, **kwargs):
super(NDCGScorer, self).__init__(ndcg_score, **kwargs)
from tkinter import messagebox
from tkinter import *
from tkinter.filedialog import askopenfilename
from tkinter import simpledialog
import tkinter
import numpy as np
from tkinter import filedialog
import pandas as pd
import matplotlib.pyplot as plt
from adarank import AdaRank
from adarank import NDCGScorer
from sklearn.datasets import load_svmlight_file
main = tkinter.Tk()
main.title("A Software Defined Network-Based Security Assessment Framework for
CloudIoT")
main.geometry("1300x1200")
indicators_list = ['Secure Booting','Device Hardware Physical Security','Firewall and
IPS','Antivirus and Antimalware','Software Updates and Patches','Authentication',
'Access Control','Security Audit','Network Socket','Web Interface
Security','Port Security','Data Transfer Protocol','Transport Encryption',
'VM Image Repository Security','VM Boundaries','DNS Server
Security','Virtual Switch Security','Malicious Network Attack','Data Locality',
'Data Integrity','Data Isolation','Data Confidentiality','Post-termination Data
Management']
global filename
X = []
Y = []
global require,not_require
global data
global score
def upload():
global filename
global train
filename = filedialog.askopenfilename(initialdir = "survey_dataset")
pathlabel.config(text=filename)
text.delete('1.0', END)
text.insert(END,'Dataset loaded\n')
def readDataset():
global data
global X, Y
data = pd.read_csv(filename)
X = data.values[:, 1:47]
text.delete('1.0', END)
text.insert(END,'Dataset processed\n\n')
text.insert(END,'Number of experts involved in survey : '+str(len(X))+"\n")
text.insert(END,'Number of Indicators used : '+str(X.shape[1])+"\n")
def LTR():
text.delete('1.0', END)
global Y
global X
Y.clear()
text.insert(END,'Security Indicator Name')
for s in range(50):
text.insert(END," ")
text.insert(END,'LTR Ranking Value\n\n')
for i in range(len(X)):
value = 0
for j in range(len(X[i])):
value = value + X[i,j]
value = value / len(X[i])
text.insert(END,indicators_list[i])
#if len(indicators_list[i]) < 23:
# for m in range(len(indicators_list[i]) - 23):
# text.insert(END," ")
gap = 73 - len(indicators_list[i])
for s in range(gap):
text.insert(END," ")
text.insert(END,str(value)+"\n")
if value > 3:
Y.append(0)
else:
Y.append(1)
data['class'] = Y
data.drop('Indicator Name', axis=1, inplace=True)
data.to_csv('mydata.csv',index=False)
def graph():
height = [require,not_require]
bars = ('Require Security Indicators','Not Require Security Indicators')
y_pos = np.arange(len(bars))
plt.bar(y_pos, height)
plt.xticks(y_pos, bars)
plt.show()
def adaRanking():
global score
global X
text.delete('1.0', END)
data = pd.read_csv('mydata.csv')
X = data.values[:, 0:47]
strs = '' for i in range(len(X)):
j = i + 1
strs+=str(X[i,46])+" qid:"+str(j)+" " for k in range(0,46):
m = k + 1
strs+=str(m)+":"+str(X[i,k])+" " strs = strs.strip()+"\n" f = open("mydata.csv", "w")
f.write(strs)
f.close()
X, y, qid = load_svmlight_file('mydata.csv', query_id=True)
model = AdaRank(max_iter=100, estop=10, verbose=True, scorer=NDCGScorer(k=5))
score = model.fit(X, y, qid)
text.insert(END,'AdaRanking process completed\n\n')
def viewResult():
global require
global not_require
require = 0
not_require = 0
for i in range(len(score)):
text.insert(END,indicators_list[i]+"\n")
text.insert(END,'AdaRank Weight Value : '+str(score[i])+"\n")
if score[i] == 0.024886258423130213:
not_require = not_require + 1
text.insert(END,'Security : Not Require\n\n')
else:
text.insert(END,'Security : Require\n\n')
require = require + 1
font = ('times', 16, 'bold')
title = Label(main, text='A Software Defined Network-Based Security Assessment
Framework for CloudIoT')
title.config(bg='dark goldenrod', fg='white')
title.config(font=font)
title.config(height=3, width=120)
title.place(x=0,y=5)
font1 = ('times', 14, 'bold')
upload = Button(main, text="Upload Expert Survey Dataset", command=upload)
upload.place(x=700,y=100)
upload.config(font=font1)
pathlabel = Label(main)
pathlabel.config(bg='DarkOrange1', fg='white')
pathlabel.config(font=font1)
pathlabel.place(x=700,y=150)
readButton = Button(main, text="Read & Process Dataset", command=readDataset)
readButton.place(x=700,y=200)
readButton.config(font=font1)
ltrButton = Button(main, text="Run LTR (Learning to Rank) Module", command=LTR)
ltrButton.place(x=700,y=250)
ltrButton.config(font=font1)
rankButton = Button(main, text="Run AdaRank Module", command=adaRanking)
rankButton.place(x=700,y=300)
rankButton.config(font=font1)
resultButton = Button(main, text="View Security Result", command=viewResult)
resultButton.place(x=700,y=350)
resultButton.config(font=font1)
graphButton = Button(main, text="Require/Not Require Graph ", command=graph)
graphButton.place(x=700,y=400)
graphButton.config(font=font1)
font1 = ('times', 12, 'bold')
text=Text(main,height=30,width=80)
scroll=Scrollbar(text)
text.configure(yscrollcommand=scroll.set)
text.place(x=10,y=100)
text.config(font=font1)
main.config(bg='turquoise')
main.mainloop()